# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uaV2320hzbJ5hmZM25X2mhzbELcATH7j
"""

import numpy as np
import pandas as pd
import os
import cv2
import pickle

from keras.models import Sequential, load_model
from tensorflow.keras.layers import BatchNormalization
from keras.layers.core import Flatten, Dense, Activation, Dropout
from keras.preprocessing import image
from keras.utils.np_utils import to_categorical
from sklearn.model_selection import train_test_split
from keras.optimizers import SGD
from sklearn.metrics import accuracy_score

with open('X_test.pkl', 'rb') as picklefile:
    X_test = pickle.load(picklefile)


with open('y_test.pkl', 'rb') as picklefile:
    y_test = pickle.load(picklefile)

testdata = np.stack(X_test)
testlabel = to_categorical(y_test)

model = load_model('model')

y_pred_test_cv = []
input_size = (512,512)
threshold = 450
def variance_of_laplacian(image):
	return cv2.Laplacian(image, cv2.CV_64F).var()

folderpath = 'CERTH_ImageBlurDataset/EvaluationSet/DigitalBlurSet/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size= input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred_test_cv.append(1)
        else:
            y_pred_test_cv.append(0)

print("Artificially Blurred Evaluated...")

folderpath = 'CERTH_ImageBlurDataset/EvaluationSet/NaturalBlurSet/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size=input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred_test_cv.append(1)
        else:
            y_pred_test_cv.append(0)

print("Naturally Blurred Evaluated...")

y_pred_cnnt = model.predict(testdata)
y_pred_cnnt = np.asarray(y_pred_cnnt)
y_pred_test_cv = np.asarray(y_pred_test_cv)
y_pred_test_cv = np.reshape(y_pred_test_cv, (y_pred_test_cv.shape[0],1))
y_pred_final_test = np.concatenate((y_pred_test_cv, y_pred_cnnt), axis=1)

model = load_model('final_model')

(loss, accuracy) = model.evaluate(y_pred_final_test, testlabel, verbose = 1)
print("accuracy: {:.2f}%".format(accuracy * 100))