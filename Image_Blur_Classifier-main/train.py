# -*- coding: utf-8 -*-
"""Combined.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11EZih4FNjBP-Ly8DUlW3tCptJS4p-ujg
"""

import numpy as np
import pandas as pd
import os
import cv2
import pickle

from keras.models import Sequential, load_model
from tensorflow.keras.layers import BatchNormalization
from keras.layers.core import Flatten, Dense, Activation, Dropout
from keras.preprocessing import image
from keras.utils.np_utils import to_categorical
from sklearn.model_selection import train_test_split
from keras.optimizers import SGD
from sklearn.metrics import accuracy_score

with open('X_train.pkl', 'rb') as picklefile:
    X_train = pickle.load( picklefile)


with open('y_train.pkl', 'rb') as picklefile:
    y_train = pickle.load( picklefile)

traindata = np.stack(X_train)
trainlabel = to_categorical(y_train)

model = load_model('model')
y_pred_cnn = model.predict(traindata)
y_pred_cnn = np.asarray(y_pred_cnn)
input_size = (512, 512)

def variance_of_laplacian(image):
	return cv2.Laplacian(image, cv2.CV_64F).var()

y_pred = []
threshold = 450

folderpath = 'CERTH_ImageBlurDataset/TrainingSet/Undistorted/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size=input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred.append(1)
        else:
            y_pred.append(0)

print("Undistorted Evaluated...")

folderpath = 'CERTH_ImageBlurDataset/TrainingSet/Artificially-Blurred/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size= input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred.append(1)
        else:
            y_pred.append(0)

print("Artificially Blurred Evaluated...")

folderpath = 'CERTH_ImageBlurDataset/TrainingSet/Naturally-Blurred/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size=input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred.append(1)
        else:
            y_pred.append(0)

print("Naturally Blurred Evaluated...")

y_pred_test_cv = []

folderpath = 'CERTH_ImageBlurDataset/EvaluationSet/DigitalBlurSet/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size= input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred_test_cv.append(1)
        else:
            y_pred_test_cv.append(0)

print("Artificially Blurred Evaluated...")

folderpath = 'CERTH_ImageBlurDataset/EvaluationSet/NaturalBlurSet/'

# load image arrays
for filename in os.listdir(folderpath):
    if filename != '.DS_Store':
        imagepath = folderpath + filename
        img = image.load_img(imagepath, target_size=input_size)
        gray = cv2.cvtColor(np.asarray(img), cv2.COLOR_BGR2GRAY)
        fm = variance_of_laplacian(gray)
        if fm < threshold:
            y_pred_test_cv.append(1)
        else:
            y_pred_test_cv.append(0)

print("Naturally Blurred Evaluated...")

y_pred_opencv = np.asarray(y_pred)
y_pred_opencv = np.reshape(y_pred_opencv, (y_pred_opencv.shape[0],1))
y_pred_final = np.concatenate((y_pred_opencv, y_pred_cnn), axis=1)

fmodel = Sequential()


fmodel.add(Dense(4096,input_dim=y_pred_final.shape[1], activation='relu'))

fmodel.add(Dense(4096, activation='relu'))
fmodel.add(Dropout(0.8))
fmodel.add(BatchNormalization())

fmodel.add(Dense(4096, activation='relu'))
fmodel.add(Dropout(0.8))
fmodel.add(BatchNormalization())

fmodel.add(Dense(4096, activation='relu'))
fmodel.add(Dropout(0.8))
fmodel.add(BatchNormalization())

fmodel.add(Dense(4096, activation='relu'))
fmodel.add(Dropout(0.8))
fmodel.add(BatchNormalization())

fmodel.add(Dense(2048, activation='relu'))
fmodel.add(Dropout(0.5))
fmodel.add(BatchNormalization())

fmodel.add(Dense(2048, activation='relu'))
fmodel.add(Dropout(0.5))
fmodel.add(BatchNormalization())

fmodel.add(Dense(2048, activation='relu'))
fmodel.add(Dropout(0.5))
fmodel.add(BatchNormalization())

fmodel.add(Dense(2,activation='softmax'))

fmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['binary_accuracy'])

fmodel.fit(y_pred_final, trainlabel, batch_size=64, epochs=10, verbose=1)

fmodel.save('final_model')