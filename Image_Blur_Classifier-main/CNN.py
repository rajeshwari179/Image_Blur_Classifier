# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GYbtHOQReOBrvuvS_vb8_nxf0KHCakCk

Imports of libraries
"""

import numpy as np
import pandas as pd
import os
import pickle

from keras.models import Sequential
from tensorflow.keras.layers import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.pooling import MaxPooling2D
from keras.layers.core import Flatten, Dense, Activation, Dropout
from keras.preprocessing import image
from keras.utils.np_utils import to_categorical
from sklearn.model_selection import train_test_split
from keras.optimizers import SGD

input_size = (224, 224)

with open('X_train.pkl', 'rb') as picklefile:
    X_train = pickle.load( picklefile)


with open('y_train.pkl', 'rb') as picklefile:
    y_train = pickle.load( picklefile)


with open('X_test.pkl', 'rb') as picklefile:
    X_test = pickle.load(picklefile)


with open('y_test.pkl', 'rb') as picklefile:
    y_test = pickle.load(picklefile)

traindata = np.stack(X_train)
testdata = np.stack(X_test)
trainlabel = to_categorical(y_train)
testlabel = to_categorical(y_test)

model = Sequential()

model.add(Conv2D(32, (3, 3), input_shape=(input_size[0], input_size[1], 3)))
model.add(Activation("relu"))
# model.add(BatchNormalization())
model.add(Conv2D(32, (3, 3)))
model.add(Activation("relu"))
# model.add(BatchNormalization())

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation("relu"))
# model.add(BatchNormalization())

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(128, (3, 3)))
model.add(Activation("relu"))

# model.add(BatchNormalization())

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(2048))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(BatchNormalization())

model.add(Dense(2048))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(BatchNormalization())

model.add(Dense(2))
model.add(Activation("softmax"))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(traindata, trainlabel, batch_size=64, epochs=20, verbose=1)
print("Model training complete...")

(loss, accuracy) = model.evaluate(testdata, testlabel, batch_size = 64, verbose = 1)
print("accuracy: {:.2f}%".format(accuracy * 100))

print(model.summary())

model.save('model')

